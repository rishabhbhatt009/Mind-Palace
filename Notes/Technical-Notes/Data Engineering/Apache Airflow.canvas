{
	"nodes":[
		{"id":"83c3a8cec5565c30","type":"group","x":920,"y":-1880,"width":840,"height":840,"label":"Architecture"},
		{"id":"ac6dbd42c8810a35","type":"group","x":760,"y":-920,"width":605,"height":448,"label":"Cron Expression"},
		{"id":"4a3434a672f86ecb","type":"text","text":"# What is Apache Airflow ?  \n\n- started by Airbnb in 2014\n- AIRbnb + WorkFLOW = AIRFLOW\n- **workflow orchestration** platform  \n- open source \n- **Airflow philosophy** : define workflows as code ","x":-1209,"y":-2140,"width":549,"height":240},
		{"id":"18840c2cc2711727","type":"text","text":"# Apache Airflow : \n\n- What is Apache Airflow ? \n- Why and why not ? \n\n---\n- Basic Concepts : \n\t- **Workflow** : Directed Acyclic Graphs (**DAGs**) \n\t- **Task**, **Dependency** : Nodes, Edges \n\t\t- Downstream Task -> Upstream Task\n\t- **Operators** : `BashOperator`, `PythonOperator`\n\t- **Execution Date** \n\t- **Task Instance** : task run at a specific point of time (execution date)\n\t- **DAG Run** : instance of DAG which contains collection of task instances  \n\n**Operator** determines what is going to be done, a **task** implements an operator by defining specific parameters, **DAG** collection of all tasks organized in a way that reflect their relationship and dependencies.\n\n---\n- Task Lifecycle \n- Architecture 101 \n\n---\n- Dependencies : \n\t- upstream/downstream, bit operators, chain, chain_linear\n\t- groups \n\t- **trigger rules** \n- DAG Notifications \n\n---\n- Airflow **XComs** : \n\t- attribute of Task Instance, enables communication b/w Tasks/Operators \n\t- values can be **pushed** to **XComs** which can later be **pulled** by other operators\n\t- returned values are also pushed to XComs \n\t- very limited space (48 KBs)\n\n- Task Flow API : \n\t- uses python decorators to define DAGs and Tasks \n\t- enables implicit XComs based on function calls in python \n\t- pros : reduces code \n\n---\n- Airflow **Catchup** and **Backfill** : \n\t- allows us to run old tasks (before `today`) based on schedule and start dates \n\t- we can set `Catchup = True/False` in the DAG definition \n\t- we run `backfill` through CLI\n\n---\n- For `schedule_interval` we have 2 options :\n\t- `datetime.timedelta`\n\t- Cron Expression / Cron Expression Presets \n\t- https://crontab.guru/ : for viz and verification of cron string\n\t- Mon-Fri for Monday to Friday\n\n---\n- Airflow **Connections** \n\t- define using Airflow UI and use thorough the `connection_id`\n\t- Connect using operators : `PostgresOperator`\n\n- Airflow Sensors : \n\t- special operators that are designed to wait for something to happen\n\t- If the condition is met, the task is marked successful and the DAG can move to downstream tasks. If the condition isn't met, the sensor waits for another interval before checking again.\n\n- Airflow Hooks : \n\t- connect to service + pre defined functionality \n\t- abstraction of a specific API that allows Airflow to interact with an external system using `connection_id`\n\t- standardize how Airflow interacts with external systems and using them makes your DAG code cleaner, easier to read, and less prone to errors.\n\n** `tempfile` library to create named temp file\n\n- Templates : Similar to obsidian\n- Macros\n\n---\n\n\n","x":-480,"y":-2140,"width":700,"height":2100},
		{"id":"c91788191ee42173","type":"text","text":"# Why and why not ? \n\nWhy Airflow ? \n- Open source + community \n- Complex **orchestration** (dependences) , rich **scheduling** with **backfilling**, **user interface**\n- Operators can **connect multiple technologies** \n- **Coding over clicking** : enables version control, collaboration and tests for validating functionality \n- Logging, Monitoring and Scalability \n\nWhy not Airflow ? \n- **Finite batch workflows** \n- Limitation : **infinite event based** and **streaming** workflows \n\nHowever,  streaming systems like **Apache Kafka** are often integrated with airflow. Kafka ingests and processes data in real time while airflow triggers workflow which process a batch of this data.\n","x":-1209,"y":-1880,"width":549,"height":540},
		{"id":"7e564c2652d6ec39","type":"text","text":"# Installation and Setup \n\n- Using PyPI (Python Package Index)\n- Using Docker Image (BEST)\n\t- extend the docker image to add Python packages (easy)\n\t- customize the docker image (avoid)","x":-1209,"y":-1302,"width":549,"height":202},
		{"id":"b5c940b200ec566b","type":"file","file":"Notes/Technical-Notes/attachments/Pasted image 20231115150410.png","x":820,"y":-2400,"width":1011,"height":380},
		{"id":"1f4fdcb203e7265e","type":"file","file":"Notes/Technical-Notes/attachments/Pasted image 20231126221302.png","x":780,"y":-709,"width":400,"height":217},
		{"id":"dec7ac720e9ccd47","type":"text","text":"# Questions : \n\n- Deployment \n- Notification ","x":-1209,"y":-1034,"width":356,"height":219},
		{"id":"99e33f12892a426d","type":"text","text":"# Resources :\n\n- Docs : \n\t- Airflow : link \n\t- Astronomer : [link](https://docs.astronomer.io/learn/connections)\n- Videos : \n\t- *** Airflow Playlist in adv. concepts for beginners : [link](https://www.youtube.com/playlist?list=PLzKRcZrsJN_xcKKyKn18K7sWu5TTtdywh)\n\t- Airflow Tutorial, by coder2j **(Main Intro + Hands-On)** : [link](https://www.youtube.com/watch?v=K9AnJ9_ZAXE&ab_channel=coder2j) \n\t- Airflow Playlist, by coder2j : [link](https://www.youtube.com/playlist?list=PLwFJcsJ61oujAqYpMp1kdUBcPG0sE0QMT)\n\t- The Newcomer's Guide to Airflow's Architecture (Concept) : [link](https://www.youtube.com/watch?v=oLTMN-4Rvj8&ab_channel=ApacheAirflow)\n\t- Apache Airflow Architecture 101, by Bryan Cafferky (Concept) : [link](https://www.youtube.com/watch?v=lVS6lz5wuH4&ab_channel=BryanCafferky)  \n\t- Don't Use Apache Airflow, by Bryan Cafferky (+limitations) : [link](https://www.youtube.com/watch?v=YQ056EKzCyw&ab_channel=BryanCafferky)\n\t- Airflow 101: Essential Tips For Beginners, by Astronomer (talk) : [link](https://www.youtube.com/watch?v=5SFVDr6F4vg&ab_channel=Astronomer)\n\t- Scaling Out Airflow, by Astronomer : [link](https://www.youtube.com/watch?v=i9F0LFobejc&ab_channel=Astronomer)\n\t- Deep dive into Airflow Kubernetes Pod Operator vs Executor (**Advance**) : [link](https://www.youtube.com/watch?v=b1gpbGB058M&ab_channel=MaxcoTecLearning)\n\t\n","x":-1371,"y":-731,"width":711,"height":471},
		{"id":"621428cf27ae644a","type":"file","file":"Notes/Technical-Notes/attachments/Pasted image 20231115143146.png","x":940,"y":-1860,"width":674,"height":440},
		{"id":"a58889252196b434","type":"file","file":"Notes/Technical-Notes/attachments/Pasted image 20231115151606.png","x":945,"y":-1382,"width":669,"height":310},
		{"id":"67c423102ba8b781","type":"file","file":"Notes/Technical-Notes/attachments/Pasted image 20231126221311.png","x":780,"y":-900,"width":399,"height":169},
		{"id":"e3992b47a64c6de9","x":760,"y":-420,"width":599,"height":740,"type":"text","text":"# Executors \n\nResponsible for executing the tasks of a workflow. When the scheduler determines that a task is ready to be executed, it's the executor's job to carry out the task. Executors can be of different types, such as\n\n- Sequential Executor\n- Local Executor\n- Celery Executor\n- Kubernetes Executor \n\n---\n- Local Executors : \n\t- `SequentialExecutor` and `LocalExecutor` run **locally**. \n\t- While the `SequentialExecutor` runs tasks sequentially in a **single process**, `LocalExecutor` can run tasks in **multiple processes parallelly**. \n\t- Good for learning airflow, testing and debugging. \n\t- They are a **single point of failure**.\n\n- Remote Executors : \n\t- `CeleryExecutor` and `KubernetesExecutor` run **remotely**. \n\t- `CeleryExecutor` uses celery for task management along with a async queue to give tasks to **pre defined number of workers**. All workers have the **same config** and are **always running**. \n\t- `KubernetesExecutor` creates and destroys workers on-demand. Workers can have unique configuration."}
	],
	"edges":[
		{"id":"aae54d99c59235fe","fromNode":"18840c2cc2711727","fromSide":"right","toNode":"b5c940b200ec566b","toSide":"left","label":"Task Lifecycle"},
		{"id":"8ef6fd9b6d9a4806","fromNode":"18840c2cc2711727","fromSide":"right","toNode":"83c3a8cec5565c30","toSide":"left","label":"Architecture 101"},
		{"id":"8ae3526f778630d3","fromNode":"18840c2cc2711727","fromSide":"right","toNode":"ac6dbd42c8810a35","toSide":"left"},
		{"id":"0fb28f57e4b249a9","fromNode":"18840c2cc2711727","fromSide":"right","toNode":"e3992b47a64c6de9","toSide":"left"}
	]
}